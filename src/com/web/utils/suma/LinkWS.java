package com.web.utils.suma;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.3.7
 * 2012-06-28T16:35:21.062+08:00
 * Generated source version: 2.3.7
 * 
 */
@WebServiceClient(name = "LinkWS", 
                  wsdlLocation = "http://120.132.132.133/WS/LinkWS.asmx?wsdl",
                  targetNamespace = "http://tempuri.org/") 
public class LinkWS extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://tempuri.org/", "LinkWS");
    public final static QName LinkWSSoap = new QName("http://tempuri.org/", "LinkWSSoap");
    public final static QName LinkWSSoap12 = new QName("http://tempuri.org/", "LinkWSSoap12");
    public final static QName LinkWSHttpPost = new QName("http://tempuri.org/", "LinkWSHttpPost");
    public final static QName LinkWSHttpGet = new QName("http://tempuri.org/", "LinkWSHttpGet");
    static {
        URL url = null;
        try {
            url = new URL("http://120.132.132.133/WS/LinkWS.asmx?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(LinkWS.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://120.132.132.133/WS/LinkWS.asmx?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public LinkWS(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public LinkWS(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public LinkWS() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns LinkWSSoap
     */
    @WebEndpoint(name = "LinkWSSoap")
    public LinkWSSoap getLinkWSSoap() {
        return super.getPort(LinkWSSoap, LinkWSSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns LinkWSSoap
     */
//    @WebEndpoint(name = "LinkWSSoap")
//    public LinkWSSoap getLinkWSSoap(WebServiceFeature... features) {
//        return super.getPort(LinkWSSoap, LinkWSSoap.class, features);
//    }
    /**
     *
     * @return
     *     returns LinkWSSoap
     */
    @WebEndpoint(name = "LinkWSSoap12")
    public LinkWSSoap getLinkWSSoap12() {
        return super.getPort(LinkWSSoap12, LinkWSSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns LinkWSSoap
     */
   // @WebEndpoint(name = "LinkWSSoap12")
//    public LinkWSSoap getLinkWSSoap12(WebServiceFeature... features) {
//        return super.getPort(LinkWSSoap12, LinkWSSoap.class, features);
//    }
    /**
     *
     * @return
     *     returns LinkWSHttpPost
     */
    @WebEndpoint(name = "LinkWSHttpPost")
    public LinkWSHttpPost getLinkWSHttpPost() {
        return super.getPort(LinkWSHttpPost, LinkWSHttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns LinkWSHttpPost
     */
//    @WebEndpoint(name = "LinkWSHttpPost")
//    public LinkWSHttpPost getLinkWSHttpPost(WebServiceFeature... features) {
//        return super.getPort(LinkWSHttpPost, LinkWSHttpPost.class, features);
//    }
    /**
     *
     * @return
     *     returns LinkWSHttpGet
     */
    @WebEndpoint(name = "LinkWSHttpGet")
    public LinkWSHttpGet getLinkWSHttpGet() {
        return super.getPort(LinkWSHttpGet, LinkWSHttpGet.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns LinkWSHttpGet
     */
//    @WebEndpoint(name = "LinkWSHttpGet")
//    public LinkWSHttpGet getLinkWSHttpGet(WebServiceFeature... features) {
//        return super.getPort(LinkWSHttpGet, LinkWSHttpGet.class, features);
//    }

}
